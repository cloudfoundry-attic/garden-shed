// Code generated by counterfeiter. DO NOT EDIT.
package kawasakifakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/kawasaki"
	"code.cloudfoundry.org/lager"
)

type FakeFirewallOpener struct {
	OpenStub        func(log lager.Logger, instance, handle string, rule garden.NetOutRule) error
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		log      lager.Logger
		instance string
		handle   string
		rule     garden.NetOutRule
	}
	openReturns struct {
		result1 error
	}
	openReturnsOnCall map[int]struct {
		result1 error
	}
	BulkOpenStub        func(log lager.Logger, instance, handle string, rule []garden.NetOutRule) error
	bulkOpenMutex       sync.RWMutex
	bulkOpenArgsForCall []struct {
		log      lager.Logger
		instance string
		handle   string
		rule     []garden.NetOutRule
	}
	bulkOpenReturns struct {
		result1 error
	}
	bulkOpenReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallOpener) Open(log lager.Logger, instance string, handle string, rule garden.NetOutRule) error {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		log      lager.Logger
		instance string
		handle   string
		rule     garden.NetOutRule
	}{log, instance, handle, rule})
	fake.recordInvocation("Open", []interface{}{log, instance, handle, rule})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(log, instance, handle, rule)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.openReturns.result1
}

func (fake *FakeFirewallOpener) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeFirewallOpener) OpenArgsForCall(i int) (lager.Logger, string, string, garden.NetOutRule) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].log, fake.openArgsForCall[i].instance, fake.openArgsForCall[i].handle, fake.openArgsForCall[i].rule
}

func (fake *FakeFirewallOpener) OpenReturns(result1 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallOpener) OpenReturnsOnCall(i int, result1 error) {
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallOpener) BulkOpen(log lager.Logger, instance string, handle string, rule []garden.NetOutRule) error {
	var ruleCopy []garden.NetOutRule
	if rule != nil {
		ruleCopy = make([]garden.NetOutRule, len(rule))
		copy(ruleCopy, rule)
	}
	fake.bulkOpenMutex.Lock()
	ret, specificReturn := fake.bulkOpenReturnsOnCall[len(fake.bulkOpenArgsForCall)]
	fake.bulkOpenArgsForCall = append(fake.bulkOpenArgsForCall, struct {
		log      lager.Logger
		instance string
		handle   string
		rule     []garden.NetOutRule
	}{log, instance, handle, ruleCopy})
	fake.recordInvocation("BulkOpen", []interface{}{log, instance, handle, ruleCopy})
	fake.bulkOpenMutex.Unlock()
	if fake.BulkOpenStub != nil {
		return fake.BulkOpenStub(log, instance, handle, rule)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bulkOpenReturns.result1
}

func (fake *FakeFirewallOpener) BulkOpenCallCount() int {
	fake.bulkOpenMutex.RLock()
	defer fake.bulkOpenMutex.RUnlock()
	return len(fake.bulkOpenArgsForCall)
}

func (fake *FakeFirewallOpener) BulkOpenArgsForCall(i int) (lager.Logger, string, string, []garden.NetOutRule) {
	fake.bulkOpenMutex.RLock()
	defer fake.bulkOpenMutex.RUnlock()
	return fake.bulkOpenArgsForCall[i].log, fake.bulkOpenArgsForCall[i].instance, fake.bulkOpenArgsForCall[i].handle, fake.bulkOpenArgsForCall[i].rule
}

func (fake *FakeFirewallOpener) BulkOpenReturns(result1 error) {
	fake.BulkOpenStub = nil
	fake.bulkOpenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallOpener) BulkOpenReturnsOnCall(i int, result1 error) {
	fake.BulkOpenStub = nil
	if fake.bulkOpenReturnsOnCall == nil {
		fake.bulkOpenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bulkOpenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallOpener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.bulkOpenMutex.RLock()
	defer fake.bulkOpenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirewallOpener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.FirewallOpener = new(FakeFirewallOpener)
