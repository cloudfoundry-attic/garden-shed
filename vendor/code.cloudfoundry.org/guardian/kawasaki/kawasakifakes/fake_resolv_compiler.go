// Code generated by counterfeiter. DO NOT EDIT.
package kawasakifakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
)

type FakeResolvCompiler struct {
	DetermineStub        func(resolvContents string, hostIP net.IP, pluginNameservers, operatorNameservers, additionalNameservers []net.IP, pluginSearchDomains []string) []string
	determineMutex       sync.RWMutex
	determineArgsForCall []struct {
		resolvContents        string
		hostIP                net.IP
		pluginNameservers     []net.IP
		operatorNameservers   []net.IP
		additionalNameservers []net.IP
		pluginSearchDomains   []string
	}
	determineReturns struct {
		result1 []string
	}
	determineReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResolvCompiler) Determine(resolvContents string, hostIP net.IP, pluginNameservers []net.IP, operatorNameservers []net.IP, additionalNameservers []net.IP, pluginSearchDomains []string) []string {
	var pluginNameserversCopy []net.IP
	if pluginNameservers != nil {
		pluginNameserversCopy = make([]net.IP, len(pluginNameservers))
		copy(pluginNameserversCopy, pluginNameservers)
	}
	var operatorNameserversCopy []net.IP
	if operatorNameservers != nil {
		operatorNameserversCopy = make([]net.IP, len(operatorNameservers))
		copy(operatorNameserversCopy, operatorNameservers)
	}
	var additionalNameserversCopy []net.IP
	if additionalNameservers != nil {
		additionalNameserversCopy = make([]net.IP, len(additionalNameservers))
		copy(additionalNameserversCopy, additionalNameservers)
	}
	var pluginSearchDomainsCopy []string
	if pluginSearchDomains != nil {
		pluginSearchDomainsCopy = make([]string, len(pluginSearchDomains))
		copy(pluginSearchDomainsCopy, pluginSearchDomains)
	}
	fake.determineMutex.Lock()
	ret, specificReturn := fake.determineReturnsOnCall[len(fake.determineArgsForCall)]
	fake.determineArgsForCall = append(fake.determineArgsForCall, struct {
		resolvContents        string
		hostIP                net.IP
		pluginNameservers     []net.IP
		operatorNameservers   []net.IP
		additionalNameservers []net.IP
		pluginSearchDomains   []string
	}{resolvContents, hostIP, pluginNameserversCopy, operatorNameserversCopy, additionalNameserversCopy, pluginSearchDomainsCopy})
	fake.recordInvocation("Determine", []interface{}{resolvContents, hostIP, pluginNameserversCopy, operatorNameserversCopy, additionalNameserversCopy, pluginSearchDomainsCopy})
	fake.determineMutex.Unlock()
	if fake.DetermineStub != nil {
		return fake.DetermineStub(resolvContents, hostIP, pluginNameservers, operatorNameservers, additionalNameservers, pluginSearchDomains)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.determineReturns.result1
}

func (fake *FakeResolvCompiler) DetermineCallCount() int {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return len(fake.determineArgsForCall)
}

func (fake *FakeResolvCompiler) DetermineArgsForCall(i int) (string, net.IP, []net.IP, []net.IP, []net.IP, []string) {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return fake.determineArgsForCall[i].resolvContents, fake.determineArgsForCall[i].hostIP, fake.determineArgsForCall[i].pluginNameservers, fake.determineArgsForCall[i].operatorNameservers, fake.determineArgsForCall[i].additionalNameservers, fake.determineArgsForCall[i].pluginSearchDomains
}

func (fake *FakeResolvCompiler) DetermineReturns(result1 []string) {
	fake.DetermineStub = nil
	fake.determineReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeResolvCompiler) DetermineReturnsOnCall(i int, result1 []string) {
	fake.DetermineStub = nil
	if fake.determineReturnsOnCall == nil {
		fake.determineReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.determineReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeResolvCompiler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResolvCompiler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.ResolvCompiler = new(FakeResolvCompiler)
