// Code generated by counterfeiter. DO NOT EDIT.
package gardenerfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/gardener"
	"code.cloudfoundry.org/lager"
)

type FakePeaCleaner struct {
	CleanAllStub        func(logger lager.Logger) error
	cleanAllMutex       sync.RWMutex
	cleanAllArgsForCall []struct {
		logger lager.Logger
	}
	cleanAllReturns struct {
		result1 error
	}
	cleanAllReturnsOnCall map[int]struct {
		result1 error
	}
	CleanStub        func(logger lager.Logger, handle string) error
	cleanMutex       sync.RWMutex
	cleanArgsForCall []struct {
		logger lager.Logger
		handle string
	}
	cleanReturns struct {
		result1 error
	}
	cleanReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePeaCleaner) CleanAll(logger lager.Logger) error {
	fake.cleanAllMutex.Lock()
	ret, specificReturn := fake.cleanAllReturnsOnCall[len(fake.cleanAllArgsForCall)]
	fake.cleanAllArgsForCall = append(fake.cleanAllArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("CleanAll", []interface{}{logger})
	fake.cleanAllMutex.Unlock()
	if fake.CleanAllStub != nil {
		return fake.CleanAllStub(logger)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanAllReturns.result1
}

func (fake *FakePeaCleaner) CleanAllCallCount() int {
	fake.cleanAllMutex.RLock()
	defer fake.cleanAllMutex.RUnlock()
	return len(fake.cleanAllArgsForCall)
}

func (fake *FakePeaCleaner) CleanAllArgsForCall(i int) lager.Logger {
	fake.cleanAllMutex.RLock()
	defer fake.cleanAllMutex.RUnlock()
	return fake.cleanAllArgsForCall[i].logger
}

func (fake *FakePeaCleaner) CleanAllReturns(result1 error) {
	fake.CleanAllStub = nil
	fake.cleanAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePeaCleaner) CleanAllReturnsOnCall(i int, result1 error) {
	fake.CleanAllStub = nil
	if fake.cleanAllReturnsOnCall == nil {
		fake.cleanAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePeaCleaner) Clean(logger lager.Logger, handle string) error {
	fake.cleanMutex.Lock()
	ret, specificReturn := fake.cleanReturnsOnCall[len(fake.cleanArgsForCall)]
	fake.cleanArgsForCall = append(fake.cleanArgsForCall, struct {
		logger lager.Logger
		handle string
	}{logger, handle})
	fake.recordInvocation("Clean", []interface{}{logger, handle})
	fake.cleanMutex.Unlock()
	if fake.CleanStub != nil {
		return fake.CleanStub(logger, handle)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanReturns.result1
}

func (fake *FakePeaCleaner) CleanCallCount() int {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return len(fake.cleanArgsForCall)
}

func (fake *FakePeaCleaner) CleanArgsForCall(i int) (lager.Logger, string) {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return fake.cleanArgsForCall[i].logger, fake.cleanArgsForCall[i].handle
}

func (fake *FakePeaCleaner) CleanReturns(result1 error) {
	fake.CleanStub = nil
	fake.cleanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePeaCleaner) CleanReturnsOnCall(i int, result1 error) {
	fake.CleanStub = nil
	if fake.cleanReturnsOnCall == nil {
		fake.cleanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePeaCleaner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanAllMutex.RLock()
	defer fake.cleanAllMutex.RUnlock()
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePeaCleaner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gardener.PeaCleaner = new(FakePeaCleaner)
