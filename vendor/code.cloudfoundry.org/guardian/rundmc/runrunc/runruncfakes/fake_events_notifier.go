// Code generated by counterfeiter. DO NOT EDIT.
package runruncfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/runrunc"
)

type FakeEventsNotifier struct {
	OnEventStub        func(handle string, event string) error
	onEventMutex       sync.RWMutex
	onEventArgsForCall []struct {
		handle string
		event  string
	}
	onEventReturns struct {
		result1 error
	}
	onEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventsNotifier) OnEvent(handle string, event string) error {
	fake.onEventMutex.Lock()
	ret, specificReturn := fake.onEventReturnsOnCall[len(fake.onEventArgsForCall)]
	fake.onEventArgsForCall = append(fake.onEventArgsForCall, struct {
		handle string
		event  string
	}{handle, event})
	fake.recordInvocation("OnEvent", []interface{}{handle, event})
	fake.onEventMutex.Unlock()
	if fake.OnEventStub != nil {
		return fake.OnEventStub(handle, event)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.onEventReturns.result1
}

func (fake *FakeEventsNotifier) OnEventCallCount() int {
	fake.onEventMutex.RLock()
	defer fake.onEventMutex.RUnlock()
	return len(fake.onEventArgsForCall)
}

func (fake *FakeEventsNotifier) OnEventArgsForCall(i int) (string, string) {
	fake.onEventMutex.RLock()
	defer fake.onEventMutex.RUnlock()
	return fake.onEventArgsForCall[i].handle, fake.onEventArgsForCall[i].event
}

func (fake *FakeEventsNotifier) OnEventReturns(result1 error) {
	fake.OnEventStub = nil
	fake.onEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventsNotifier) OnEventReturnsOnCall(i int, result1 error) {
	fake.OnEventStub = nil
	if fake.onEventReturnsOnCall == nil {
		fake.onEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventsNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onEventMutex.RLock()
	defer fake.onEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventsNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runrunc.EventsNotifier = new(FakeEventsNotifier)
