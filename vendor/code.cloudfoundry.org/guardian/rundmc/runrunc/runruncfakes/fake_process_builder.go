// Code generated by counterfeiter. DO NOT EDIT.
package runruncfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/goci"
	"code.cloudfoundry.org/guardian/rundmc/runrunc"
)

type FakeProcessBuilder struct {
	BuildProcessStub        func(bndl goci.Bndl, processSpec runrunc.ProcessSpec) *runrunc.PreparedSpec
	buildProcessMutex       sync.RWMutex
	buildProcessArgsForCall []struct {
		bndl        goci.Bndl
		processSpec runrunc.ProcessSpec
	}
	buildProcessReturns struct {
		result1 *runrunc.PreparedSpec
	}
	buildProcessReturnsOnCall map[int]struct {
		result1 *runrunc.PreparedSpec
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessBuilder) BuildProcess(bndl goci.Bndl, processSpec runrunc.ProcessSpec) *runrunc.PreparedSpec {
	fake.buildProcessMutex.Lock()
	ret, specificReturn := fake.buildProcessReturnsOnCall[len(fake.buildProcessArgsForCall)]
	fake.buildProcessArgsForCall = append(fake.buildProcessArgsForCall, struct {
		bndl        goci.Bndl
		processSpec runrunc.ProcessSpec
	}{bndl, processSpec})
	fake.recordInvocation("BuildProcess", []interface{}{bndl, processSpec})
	fake.buildProcessMutex.Unlock()
	if fake.BuildProcessStub != nil {
		return fake.BuildProcessStub(bndl, processSpec)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildProcessReturns.result1
}

func (fake *FakeProcessBuilder) BuildProcessCallCount() int {
	fake.buildProcessMutex.RLock()
	defer fake.buildProcessMutex.RUnlock()
	return len(fake.buildProcessArgsForCall)
}

func (fake *FakeProcessBuilder) BuildProcessArgsForCall(i int) (goci.Bndl, runrunc.ProcessSpec) {
	fake.buildProcessMutex.RLock()
	defer fake.buildProcessMutex.RUnlock()
	return fake.buildProcessArgsForCall[i].bndl, fake.buildProcessArgsForCall[i].processSpec
}

func (fake *FakeProcessBuilder) BuildProcessReturns(result1 *runrunc.PreparedSpec) {
	fake.BuildProcessStub = nil
	fake.buildProcessReturns = struct {
		result1 *runrunc.PreparedSpec
	}{result1}
}

func (fake *FakeProcessBuilder) BuildProcessReturnsOnCall(i int, result1 *runrunc.PreparedSpec) {
	fake.BuildProcessStub = nil
	if fake.buildProcessReturnsOnCall == nil {
		fake.buildProcessReturnsOnCall = make(map[int]struct {
			result1 *runrunc.PreparedSpec
		})
	}
	fake.buildProcessReturnsOnCall[i] = struct {
		result1 *runrunc.PreparedSpec
	}{result1}
}

func (fake *FakeProcessBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildProcessMutex.RLock()
	defer fake.buildProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runrunc.ProcessBuilder = new(FakeProcessBuilder)
