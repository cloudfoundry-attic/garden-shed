// Code generated by counterfeiter. DO NOT EDIT.
package depotfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/depot"
	"code.cloudfoundry.org/guardian/rundmc/goci"
)

type FakeBundleSaver struct {
	SaveStub        func(bundle goci.Bndl, path string) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		bundle goci.Bndl
		path   string
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundleSaver) Save(bundle goci.Bndl, path string) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		bundle goci.Bndl
		path   string
	}{bundle, path})
	fake.recordInvocation("Save", []interface{}{bundle, path})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(bundle, path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.saveReturns.result1
}

func (fake *FakeBundleSaver) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeBundleSaver) SaveArgsForCall(i int) (goci.Bndl, string) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].bundle, fake.saveArgsForCall[i].path
}

func (fake *FakeBundleSaver) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBundleSaver) SaveReturnsOnCall(i int, result1 error) {
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBundleSaver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBundleSaver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ depot.BundleSaver = new(FakeBundleSaver)
