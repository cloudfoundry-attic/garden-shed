// Code generated by counterfeiter. DO NOT EDIT.
package cgroupsfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/cgroups"
)

type FakeChowner struct {
	RecursiveChownStub        func(path string) error
	recursiveChownMutex       sync.RWMutex
	recursiveChownArgsForCall []struct {
		path string
	}
	recursiveChownReturns struct {
		result1 error
	}
	recursiveChownReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChowner) RecursiveChown(path string) error {
	fake.recursiveChownMutex.Lock()
	ret, specificReturn := fake.recursiveChownReturnsOnCall[len(fake.recursiveChownArgsForCall)]
	fake.recursiveChownArgsForCall = append(fake.recursiveChownArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("RecursiveChown", []interface{}{path})
	fake.recursiveChownMutex.Unlock()
	if fake.RecursiveChownStub != nil {
		return fake.RecursiveChownStub(path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.recursiveChownReturns.result1
}

func (fake *FakeChowner) RecursiveChownCallCount() int {
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	return len(fake.recursiveChownArgsForCall)
}

func (fake *FakeChowner) RecursiveChownArgsForCall(i int) string {
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	return fake.recursiveChownArgsForCall[i].path
}

func (fake *FakeChowner) RecursiveChownReturns(result1 error) {
	fake.RecursiveChownStub = nil
	fake.recursiveChownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeChowner) RecursiveChownReturnsOnCall(i int, result1 error) {
	fake.RecursiveChownStub = nil
	if fake.recursiveChownReturnsOnCall == nil {
		fake.recursiveChownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.recursiveChownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeChowner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChowner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cgroups.Chowner = new(FakeChowner)
