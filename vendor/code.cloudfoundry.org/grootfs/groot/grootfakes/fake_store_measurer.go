// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeStoreMeasurer struct {
	CommittedQuotaStub        func(logger lager.Logger) (int64, error)
	committedQuotaMutex       sync.RWMutex
	committedQuotaArgsForCall []struct {
		logger lager.Logger
	}
	committedQuotaReturns struct {
		result1 int64
		result2 error
	}
	committedQuotaReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	TotalVolumesSizeStub        func(logger lager.Logger) (int64, error)
	totalVolumesSizeMutex       sync.RWMutex
	totalVolumesSizeArgsForCall []struct {
		logger lager.Logger
	}
	totalVolumesSizeReturns struct {
		result1 int64
		result2 error
	}
	totalVolumesSizeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreMeasurer) CommittedQuota(logger lager.Logger) (int64, error) {
	fake.committedQuotaMutex.Lock()
	ret, specificReturn := fake.committedQuotaReturnsOnCall[len(fake.committedQuotaArgsForCall)]
	fake.committedQuotaArgsForCall = append(fake.committedQuotaArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("CommittedQuota", []interface{}{logger})
	fake.committedQuotaMutex.Unlock()
	if fake.CommittedQuotaStub != nil {
		return fake.CommittedQuotaStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.committedQuotaReturns.result1, fake.committedQuotaReturns.result2
}

func (fake *FakeStoreMeasurer) CommittedQuotaCallCount() int {
	fake.committedQuotaMutex.RLock()
	defer fake.committedQuotaMutex.RUnlock()
	return len(fake.committedQuotaArgsForCall)
}

func (fake *FakeStoreMeasurer) CommittedQuotaArgsForCall(i int) lager.Logger {
	fake.committedQuotaMutex.RLock()
	defer fake.committedQuotaMutex.RUnlock()
	return fake.committedQuotaArgsForCall[i].logger
}

func (fake *FakeStoreMeasurer) CommittedQuotaReturns(result1 int64, result2 error) {
	fake.CommittedQuotaStub = nil
	fake.committedQuotaReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) CommittedQuotaReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CommittedQuotaStub = nil
	if fake.committedQuotaReturnsOnCall == nil {
		fake.committedQuotaReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.committedQuotaReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) TotalVolumesSize(logger lager.Logger) (int64, error) {
	fake.totalVolumesSizeMutex.Lock()
	ret, specificReturn := fake.totalVolumesSizeReturnsOnCall[len(fake.totalVolumesSizeArgsForCall)]
	fake.totalVolumesSizeArgsForCall = append(fake.totalVolumesSizeArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("TotalVolumesSize", []interface{}{logger})
	fake.totalVolumesSizeMutex.Unlock()
	if fake.TotalVolumesSizeStub != nil {
		return fake.TotalVolumesSizeStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.totalVolumesSizeReturns.result1, fake.totalVolumesSizeReturns.result2
}

func (fake *FakeStoreMeasurer) TotalVolumesSizeCallCount() int {
	fake.totalVolumesSizeMutex.RLock()
	defer fake.totalVolumesSizeMutex.RUnlock()
	return len(fake.totalVolumesSizeArgsForCall)
}

func (fake *FakeStoreMeasurer) TotalVolumesSizeArgsForCall(i int) lager.Logger {
	fake.totalVolumesSizeMutex.RLock()
	defer fake.totalVolumesSizeMutex.RUnlock()
	return fake.totalVolumesSizeArgsForCall[i].logger
}

func (fake *FakeStoreMeasurer) TotalVolumesSizeReturns(result1 int64, result2 error) {
	fake.TotalVolumesSizeStub = nil
	fake.totalVolumesSizeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) TotalVolumesSizeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.TotalVolumesSizeStub = nil
	if fake.totalVolumesSizeReturnsOnCall == nil {
		fake.totalVolumesSizeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.totalVolumesSizeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.committedQuotaMutex.RLock()
	defer fake.committedQuotaMutex.RUnlock()
	fake.totalVolumesSizeMutex.RLock()
	defer fake.totalVolumesSizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreMeasurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.StoreMeasurer = new(FakeStoreMeasurer)
