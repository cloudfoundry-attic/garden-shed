#!/bin/bash -e

RED=1
GREEN=2
print_message() {
  message=$1
  colour=$2
  printf "\r\033[00;3${colour}m[${message}]\033[0m\n"
}

usage() {
  colour=$1
  print_message "Usage:" $colour
  print_message "deps -a <url> --- add a new dependency" $colour
  print_message "deps -d <url> --- remove a dependency" $colour
  print_message "deps -u <url> --- update a dependency" $colour
  print_message "deps -h       --- print help menu" $colour
}

add_dep() {
  dep=$1
  print_message "ADDING DEPENDENCY $dep" $GREEN

  add_submodule $dep

  print_message "DEPENDENCY ADDED" $GREEN
  test_warning
}

remove_dep() {
  dep=$1
  print_message "DELETING DEPENDENCY $dep" $GREEN

  delete_submodule $dep

  git add vendor/ .gitmodules

  print_message "DEPENDENCY DELETED" $GREEN
  test_warning
}

update_dep() {
  dep=$1
  print_message "UPDATING DEPENDENCY $dep" $GREEN

  pushd vendor/$dep
    git checkout master
    git pull -r
  popd

  git add vendor/$dep

  print_message "DEPENDENCY UPDATED" $GREEN
  test_warning
}

convert_url() {
  repo_path=$1
  url_conversion_rules=("s/code.cloudfoundry.org/github.com\/cloudfoundry/" "s/golang.org\/x/go.googlesource.com/")

  url="https://"$(echo $repo_path | sed -e 's/.\/vendor\///')
  for rule in ${url_conversion_rules[@]}; do
    url=$(echo $url | sed $rule)
  done

  echo $url
}

add_submodule() {
  path=$1
  url=$(convert_url $path)

  print_message "ADDING GIT SUBMODULE $url to vendor/$path" $GREEN
  git submodule add $url vendor/$path  &> /dev/null
  print_message "SUBMODULE ADDED" $GREEN
}

update_gitmodules() {
  dep=$1
  echo "$(grep -v $dep .gitmodules)" > .gitmodules
  echo "$(grep -v $dep .git/config)" > .git/config

  dep=$(convert_url $dep)
  echo "$(grep -v $dep .gitmodules)" > .gitmodules
  echo "$(grep -v $dep .git/config)" > .git/config
}

delete_submodule() {
  dep=$1

  print_message "DELETING DEPENDENCY GIT SUBMODULE $dep" $GREEN
  rm -rf vendor/$dep
  rm -rf .git/modules/vendor/$dep
  update_gitmodules $dep
  print_message "GIT SUBMODULE $dep DELETED" $GREEN
}

test_warning() {
  print_message "Dependencies updated." $RED
  print_message "TEST NOW." $RED
}

while getopts "a:d:u:h" OPTION
do
  case $OPTION in
    a)
      add_dep $OPTARG
      exit
      ;;
    d)
      remove_dep $OPTARG
      exit
      ;;
    u)
      update_dep $OPTARG
      exit
      ;;
    h)
      usage $GREEN
      exit
      ;;
    *)
      usage $RED
      exit
      ;;
  esac
done

if [ -z $OPTARG ]; then
  usage $GREEN
fi
